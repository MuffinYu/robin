{"slug":"--","title":"算法基础（1）——红黑树","createAt":1570519363607,"tag":["算法","java"],"body":"<h3 id=\"一、红黑树介绍\">一、红黑树介绍</h3>\n<p>红黑树(Red-Black Tree，简称R-B Tree)，它一种特殊的二叉查找树。</p>\n<p>红黑树是特殊的二叉查找树，意味着它满足二叉查找树的特征：任意一个节点所包含的键值，大于等于左孩子的键值，小于等于右孩子的键值。</p>\n<p>红黑树区别于普通话二叉树在于每个节点上都有存储位表示节点的颜色，颜色是红(Red)或黑(Black)。</p>\n<p>同时节点颜色有以下的特性:<br/>(1) 每个节点或者是黑色，或者是红色。<br/>(2) 根节点是黑色。<br/>(3) 每个叶子节点是黑色。 [注意：这里叶子节点，是指为空的叶子节点！]<br/>(4) 如果一个节点是红色的，则它的子节点必须是黑色的。[一条线上不会出现两个及以上连续的红色节点，可能出现连续黑色节点]<br/>(5) 从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。</p>\n<p>在二叉树和上述五个特性的限制下，从根节点到叶子节点的最长路径不多于最短路径的两倍。二叉树在极端情况下会退化成链表，此时查询的复杂度为O(n)，就没有了二叉树的特性减少时间复杂度的特点，如下图右侧，但红黑树会保证每个分枝的长度不会相差太多，确保时间性能在O(logN)左右。</p>\n<p><img src=\"./images/red-black-tree/red-black-tree-1.png\" alt=\"红黑树和二叉树\"/></p>\n<h3 id=\"二、红黑树构建\">二、红黑树构建</h3>\n<p>红黑树的构建关键在于，添加和节点后，需要经过变色和旋转调整，以满足红黑树的五点要求，但不是每次添加节点都需要变色和旋转，需要判断不同情形，下面先介绍红黑树添加节点的情况处理：</p>\n<p>为方便上下文结合代码理解，这里先给出基本的节点和树的代码：</p>\n<ul>\n<li>节点颜色</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"token comment\">// NodeColor.java</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NodeColor</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> String Red <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> String Black <span class=\"token operator\">=</span> <span class=\"token string\">\"black\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>节点（使用lombok注解，省去了构造方法和getter，setter方法）</li>\n</ul>\n<p><strong>注意：</strong>空节点的默认颜色为黑色，新添加节点的默认颜色为红色</p>\n<pre><code class=\"language-java\"><span class=\"token comment\">// RedBlackTreeNode.java</span>\n<span class=\"token keyword\">import</span> lombok<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n@AllArgsConstructor\n@NoArgsConstructor\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedBlackTreeNode</span> <span class=\"token punctuation\">{</span>\n   @Getter\n   @Setter\n   <span class=\"token keyword\">private</span> String color <span class=\"token operator\">=</span> NodeColor<span class=\"token punctuation\">.</span>Black<span class=\"token punctuation\">;</span>\n\n   @Getter\n   @Setter\n   <span class=\"token keyword\">private</span> int key <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n   @Getter\n   @Setter\n   <span class=\"token keyword\">private</span> RedBlackTreeNode left<span class=\"token punctuation\">;</span>\n\n   @Getter\n   @Setter\n   <span class=\"token keyword\">private</span> RedBlackTreeNode right<span class=\"token punctuation\">;</span>\n\n   @Getter\n   @Setter\n   <span class=\"token keyword\">private</span> RedBlackTreeNode parent<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre><code class=\"language-java\"><span class=\"token comment\">// RedBlackTree.java</span>\n<span class=\"token keyword\">import</span> lombok<span class=\"token punctuation\">.</span>Getter<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> lombok<span class=\"token punctuation\">.</span>Setter<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedBlackTree</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n    * 空节点\n    * 默认颜色为黑色\n    */</span>\n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> RedBlackTreeNode nil <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedBlackTreeNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">/**\n    * 记录根节点\n    */</span>\n   @Getter\n   @Setter\n   <span class=\"token keyword\">private</span> RedBlackTreeNode root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedBlackTreeNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">/**\n    * 构造空树\n    */</span>\n   <span class=\"token keyword\">public</span> <span class=\"token function\">RedBlackTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      root <span class=\"token operator\">=</span> nil<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token comment\">/**\n    * 生成一个新节点，默认颜色为红色\n    * @param key\n    * @return\n    */</span>\n   <span class=\"token keyword\">public</span> RedBlackTreeNode <span class=\"token constant\">RB_NODE</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">int key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      RedBlackTreeNode node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedBlackTreeNode</span><span class=\"token punctuation\">(</span>NodeColor<span class=\"token punctuation\">.</span>Red<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> nil<span class=\"token punctuation\">,</span> nil<span class=\"token punctuation\">,</span> nil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token comment\">/**\n    * 判断节点是否为空\n    * @param node\n    * @return\n    */</span>\n   <span class=\"token keyword\">public</span> boolean <span class=\"token function\">IsNil</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">RedBlackTreeNode node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> nil<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"（1）、添加节点\">（1）、添加节点</h4>\n<ol>\n<li><p>首先找到节点的添加位置，插入节点</p>\n<pre><code class=\"language-java\"><span class=\"token comment\">/**\n* 插入节点\n* @param T\n* @param z\n*/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token constant\">RB_INSERT</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">RedBlackTree <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> RedBlackTreeNode z</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// 临时变量节点y,存储临时节点，默认为nil</span>\n RedBlackTreeNode y <span class=\"token operator\">=</span> RedBlackTree<span class=\"token punctuation\">.</span>nil<span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 获取根节点，从根节点开始遍历查询</span>\n RedBlackTreeNode x <span class=\"token operator\">=</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 循环二分查找合适的插入点</span>\n <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IsNil</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 保存当前节点，作为结果的根节点</span>\n    y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       <span class=\"token comment\">// 添加节点值小于节点的值，查找左子树</span>\n       x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token comment\">// 添加节点值大于节点的值，查找右子树</span>\n       x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token comment\">// 临时节点y设置为插入点的父节点</span>\n z<span class=\"token punctuation\">.</span><span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IsNil</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 空树时设置z为根节点</span>\n    <span class=\"token constant\">T</span><span class=\"token punctuation\">.</span><span class=\"token function\">setRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 新节点为左子节点</span>\n    y<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 新节点为右子节点</span>\n    y<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token comment\">// 将插入节点的左右子树设为nil，颜色为红色，已经在构造时设置过，可以省略</span>\n z<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>RedBlackTree<span class=\"token punctuation\">.</span>nil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n z<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>RedBlackTree<span class=\"token punctuation\">.</span>nil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n z<span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>NodeColor<span class=\"token punctuation\">.</span>Red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 插入调整</span>\n <span class=\"token constant\">RB_INSERT_FIXUP</span><span class=\"token punctuation\">(</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>根据不同情况，进行变色和旋转</p>\n</li>\n<li><p>1 插入情况总结</p>\n</li>\n</ol>\n<ul>\n<li><p><strong>情况1：</strong>如果是根节点，直接插入就完事了（插入还是固定为红色，然后在代码的最后把根目录设置为黑色）</p>\n</li>\n<li><p><strong>情况2：</strong>插入节点的父亲，为黑色，也一样，插入就完事了，不用做任何的改动</p>\n</li>\n<li><p><strong>情况3：</strong>插入节点的父亲为红色，叔叔节点（插入节点的爷爷的另一个子节点）的颜色也是红色</p>\n</li>\n<li><p><strong>情况4：</strong>插入节点的父亲为红色，叔叔节点节点为黑色</p>\n<p>情况4最麻烦，因为需要再做一次判断，</p>\n</li>\n<li><p><em>（爷爷节点用G表示，父：F，叔叔：U，插入节点：M）*</em></p>\n<p>注意，下面四张图U节点都是Nil节点（也就是一个不能存在的节点，根据红黑树的特点，这个节点的颜色也是黑色），下图中画出来是为了便于理解。</p>\n</li>\n</ul>\n<p><img src=\"./images/red-black-tree/red-black-tree-2.png\" alt=\"F是左节点，M是右节点\"/><br/><img src=\"./images/red-black-tree/red-black-tree-3.png\" alt=\"F是左节点，M是左节点\"/><br/><img src=\"./images/red-black-tree/red-black-tree-4.png\" alt=\"F是右节点，M是左节点\"/><br/><img src=\"./images/red-black-tree/red-black-tree-5.png\" alt=\"F是右节点，M是右节点\"/></p>\n<p>四张图从左到右，从上到下：</p>\n<p>图1：父节点是爷爷节点左节点，插入节点是父节点的右节点；<br/>图2：父节点是爷爷节点左节点，插入节点是父节点的左节点；<br/>图3：父节点是爷爷节点右节点，插入节点是父节点的左节点；<br/>图4：父节点是爷爷节点右节点，插入节点是父节点的右节点；</p>\n<p>四种情况总结来说，主要是<strong>爷爷节点、爸爸节点和插入节点是否是三点一线</strong>，如果不是三点一线，如图1和图3，就属于情况4的阶段1；如果是三点一线，如图2和图4，就属于情况4的阶段2。</p>\n<p>阶段1和阶段2有什么联系吗？阶段1的处理方式，就是经过旋转变成阶段2后，再做阶段2的旋转处理。</p>\n<p>2.2 插入情况处理</p>\n<p>情况1：表示插入的根节点，直接把新节点的红色变成黑色就可以了。</p>\n<p>情况2：父节点是黑色，直接插入，不做任何旋转和变色处理。</p>\n<p>情况3：父节点是红色，叔叔节点也是红色，直接把叔叔节点和父节点的颜色变成黑色，爷爷节点变成红色，并由爷爷节点继续上溯判断，爷爷节点的父节点颜色，做类似的处理。（因为太爷爷节点可能为红色，将爷爷节点变成红色，可能会和特性4冲突，必须向上继续判断）。</p>\n<p>情况4：父节点是红色，叔叔节点是黑色，这种情况较为复杂，先判断处于那个阶段。</p>\n<ul>\n<li>如果符合阶段1，图1和图3情形，图1就对F节点做左旋，图3就对F节点右旋，如下图，经过旋转，变成阶段2，即插入节点、父节点和爷爷节三点一线。</li>\n</ul>\n<p><img src=\"./images/red-black-tree/red-black-tree-6.png\" alt=\"F是左节点，M是右节点，F左旋\"/><br/><img src=\"./images/red-black-tree/red-black-tree-7.png\" alt=\"F是右节点，M是左节点，F右旋\"/></p>\n<ul>\n<li>如果符合阶段2，图2和图4情形，图2就对G节点右旋，然后将G变为红色，如下图：</li>\n</ul>\n<p><img src=\"./images/red-black-tree/red-black-tree-8.png\" alt=\"F是左节点，M是左节点，G右旋，F黑色，G红色\"/><br/><img src=\"./images/red-black-tree/red-black-tree-9.png\" alt=\"F是右节点，M是右节点，G左旋，F黑色，G红色\"/></p>\n<ol start=\"3\">\n<li><p>代码实现</p>\n<p>综合上述的不同场景，整体逻辑流程总结如下图：</p>\n</li>\n</ol>\n<p><img src=\"./images/red-black-tree/red-black-tree-10.png\" alt=\"逻辑流程图\"/></p>\n<p>  具体代码实现代码如下：</p>\n<pre><code class=\"language-java\"><span class=\"token comment\">// RedBlackTree.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token constant\">RB_INSERT_FIXUP</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">RedBlackTree <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> RedBlackTreeNode m</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// 父节点是红色</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">IsNil</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span>  m<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> NodeColor<span class=\"token punctuation\">.</span>Red<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 父节点</span>\n      RedBlackTreeNode f <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 爷爷节点</span>\n      RedBlackTreeNode g <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 叔叔节点</span>\n      RedBlackTreeNode u <span class=\"token operator\">=</span> RedBlackTree<span class=\"token punctuation\">.</span>nil<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">==</span> g<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 父节点是左节点</span>\n\n        u <span class=\"token operator\">=</span> g<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> NodeColor<span class=\"token punctuation\">.</span>Red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 叔叔节点是红色</span>\n            <span class=\"token comment\">/**\n            * 属于情况3，即叔叔节点也为红色，执行以下操作，并继续循环\n            * f节点设为黑色\n            * u节点设为黑色\n            * g节点设为红色\n            * 从g节点继续上溯循环判断，是否满足红黑树特性4\n            */</span>\n            f<span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>NodeColor<span class=\"token punctuation\">.</span>Black<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            u<span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>NodeColor<span class=\"token punctuation\">.</span>Black<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            g<span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>NodeColor<span class=\"token punctuation\">.</span>Red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            m <span class=\"token operator\">=</span> g<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 叔叔节点是黑色</span>\n            <span class=\"token comment\">// 判断插入节点是否是右节点</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">==</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token comment\">// 父节点是左节点，插入节点是右节点，叔叔节点是黑色</span>\n              <span class=\"token comment\">/**\n                * 图1类型，属于情况4，插入节点、父节点和祖父节点三点不一线，属于阶段1，做以下操作：\n                * f节点左旋\n                * 变成图2类型，情况4的阶段2，继续操作\n                */</span>\n              RedBlackTreeNode tmp <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n              m <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n              f <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n              <span class=\"token constant\">LEFT_ROTATE</span><span class=\"token punctuation\">(</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">/**\n            * 图2类型，情况4的阶段2，执行以下操作：\n            * 父节点颜色设为黑色\n            * 祖父节点颜色设为红色\n            * 对祖父节点右旋\n            */</span>\n            f<span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>NodeColor<span class=\"token punctuation\">.</span>Black<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            g<span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>NodeColor<span class=\"token punctuation\">.</span>Red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token constant\">RIGHT_ROTATE</span><span class=\"token punctuation\">(</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 父节点是右节点</span>\n        u <span class=\"token operator\">=</span> g<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> NodeColor<span class=\"token punctuation\">.</span>Red<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 叔叔节点是红色</span>\n            <span class=\"token comment\">/**\n            * 属于情况3，即叔叔节点也为红色，执行以下操作，并继续循环\n            * f节点设为黑色\n            * u节点设为黑色\n            * g节点设为红色\n            * 从g节点继续上溯循环判断，是否满足红黑树特性4\n            */</span>\n            f<span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>NodeColor<span class=\"token punctuation\">.</span>Black<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            u<span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>NodeColor<span class=\"token punctuation\">.</span>Black<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            g<span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>NodeColor<span class=\"token punctuation\">.</span>Red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            m <span class=\"token operator\">=</span> g<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 叔叔节点是黑色</span>\n            <span class=\"token comment\">// 判断插入节点是否是右节点</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">==</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token comment\">// 父节点是右节点，插入节点是左节点，叔叔节点是黑色</span>\n              <span class=\"token comment\">/**\n                * 图3类型，属于情况4，插入节点、父节点和祖父节点三点不一线，属于阶段1，做以下操作：\n                * f节点右旋\n                * 变成图4类型，情况4的阶段2，继续操作\n                */</span>\n              RedBlackTreeNode tmp <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n              m <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n              f <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n              <span class=\"token constant\">RIGHT_ROTATE</span><span class=\"token punctuation\">(</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">/**\n            * 图4类型，情况4的阶段2，执行以下操作：\n            * 父节点颜色设为黑色\n            * 祖父节点颜色设为红色\n            * 对祖父节点左旋\n            */</span>\n\n            f<span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>NodeColor<span class=\"token punctuation\">.</span>Black<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            g<span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>NodeColor<span class=\"token punctuation\">.</span>Red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token constant\">LEFT_ROTATE</span><span class=\"token punctuation\">(</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 根节点设为黑色</span>\n  <span class=\"token constant\">T</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>NodeColor<span class=\"token punctuation\">.</span>Black<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n  <span class=\"token comment\">/**\n    *  左旋示意图\n    * 对节点x进行左旋：\n    *      px                              px\n    *     /                               /\n    *    x                               y\n    *   /  \\       --(左旋)--            / \\\n    *  lx   y                          x  ry\n    *     /   \\                       /  \\\n    *    ly   ry                     lx  ly\n    *\n    */</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token constant\">LEFT_ROTATE</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">RedBlackTree <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> RedBlackTreeNode x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 定义y节点</span>\n      RedBlackTreeNode y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// y 左节点 设为 x右节点</span>\n      x<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// x 设为 y左节点父节点</span>\n      y<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// x父节点 设为y父节点</span>\n      y<span class=\"token punctuation\">.</span><span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// y 设为x父节点左/右节点或者根节点</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IsNil</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token comment\">// x为根节点， y设为根节点</span>\n         <span class=\"token constant\">T</span><span class=\"token punctuation\">.</span><span class=\"token function\">setRoot</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token comment\">// x为左节点，y设为左节点</span>\n         x<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token comment\">// x为右节点，y设为右节点</span>\n         x<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// x 设为 y左节点</span>\n      y<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// y 设为x父节点</span>\n      x<span class=\"token punctuation\">.</span><span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token comment\">/**\n    * 右旋示意图\n    * 对节点x进行右旋：\n    *            px                               px\n    *           /                                /\n    *          x                                y\n    *         /  \\      --(右旋)--             /  \\\n    *        y   rx                          ly   x\n    *       / \\                                  / \\\n    *      ly  ry                               ry  rx\n    */</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token constant\">RIGHT_ROTATE</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">RedBlackTree <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> RedBlackTreeNode x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 左节点</span>\n      RedBlackTreeNode y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// y的右节点 设为 x左节点</span>\n      x<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      y<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// x节点父节点设为 y父节点</span>\n      y<span class=\"token punctuation\">.</span><span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IsNil</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n         <span class=\"token constant\">T</span><span class=\"token punctuation\">.</span><span class=\"token function\">setRoot</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         x<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n         x<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// x设为y右节点</span>\n      y<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// y设为x父节点</span>\n      x<span class=\"token punctuation\">.</span><span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"（2）、删除节点\">（2）、删除节点</h4>\n<p>  删除节点的情况略复杂于添加节点，和添加节点类似，分两步进行，首先删除节点，然后对删除后结果进行平衡。</p>\n<ol>\n<li><p>删除节点</p>\n<p>删除节点可以分几种情况加以处理：</p>\n</li>\n</ol>\n<p>  <strong>情况1：</strong>d节点两个子节点都有；<br/>  <strong>情况2：</strong>d节点一个子节点也没有；<br/>  <strong>情况3：</strong>d节点有一个子节点；</p>\n<p>  情况1下，先找到d节点的后继节点，即d右子树的最小节点，将后继节点的值替换到删除节点位置，颜色不需要变化，然后将删除d节点的情况变为删除后继节点的情况，即将后继节点赋值给d，因为后继节点肯定只有右子树，符合情况2下的一种情况，下面再详细介绍；</p>\n<p>  查找后继节点的代码实现：</p>\n<pre><code class=\"language-java\">\n    <span class=\"token comment\">// RedBlackTree.java</span>\n    <span class=\"token comment\">/**\n    * 查找 x 左子树最小的节点\n    * @param x\n    * @return\n    */</span>\n   <span class=\"token keyword\">public</span> RedBlackTreeNode <span class=\"token constant\">TREE_MINIMUM</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">RedBlackTreeNode x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IsNil</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span></code></pre>\n<p>   删除节点代码实现：</p>\n<pre><code class=\"language-java\">    <span class=\"token comment\">// RedBlackTree.java</span>\n   <span class=\"token comment\">/**\n    * 删除节点\n    * @param T\n    * @param z\n    */</span>\n   <span class=\"token comment\">/**\n    * 删除节点\n    * @param T\n    * @param z\n    */</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token constant\">RB_DELETE</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">RedBlackTree <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> RedBlackTreeNode z</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      RedBlackTreeNode y <span class=\"token operator\">=</span> z<span class=\"token punctuation\">;</span>\n      RedBlackTreeNode x <span class=\"token operator\">=</span> RedBlackTree<span class=\"token punctuation\">.</span>nil<span class=\"token punctuation\">;</span>\n      String yOriginColor <span class=\"token operator\">=</span> y<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> RedBlackTree<span class=\"token punctuation\">.</span>nil<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token comment\">// z没有左节点</span>\n         x <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token constant\">RB_TRANSPLANT</span><span class=\"token punctuation\">(</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> RedBlackTree<span class=\"token punctuation\">.</span>nil<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token comment\">// z没有右节点</span>\n         x <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token constant\">RB_TRANSPLANT</span><span class=\"token punctuation\">(</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n         y <span class=\"token operator\">=</span> <span class=\"token constant\">TREE_MINIMUM</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         yOriginColor <span class=\"token operator\">=</span> y<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         x <span class=\"token operator\">=</span> y<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> z<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// y就是 z 的右节点</span>\n            x<span class=\"token punctuation\">.</span><span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// y 是 z 右子树的最小节点</span>\n            <span class=\"token comment\">// 用 y 的值替换 z位置的值</span>\n            <span class=\"token constant\">RB_TRANSPLANT</span><span class=\"token punctuation\">(</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            y<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            y<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n         <span class=\"token constant\">RB_TRANSPLANT</span><span class=\"token punctuation\">(</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         y<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         y<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         y<span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>yOriginColor <span class=\"token operator\">==</span> NodeColor<span class=\"token punctuation\">.</span>Black<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// y 是红色，直接删除 y</span>\n            <span class=\"token comment\">// 否则需要重新平衡树</span>\n            <span class=\"token constant\">RB_DELETE_FIXUP</span><span class=\"token punctuation\">(</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span></code></pre>\n<p>  重新平衡树有多种情形 ，下面一一介绍：</p>\n<p>  情形1: d节点兄弟节点w为红色，此时s一定有两个子节点，如下图；<br/>  <img src=\"./images/red-black-tree/red-black-tree-11.png\" alt=\"情况1：兄弟节点s为红色\"/></p>\n<p>   操作：改变w和d的父节点p的颜色，改变后s为黑色，p为红色，p节点左旋一次，d节点的兄弟节点变为w节点的右子节点，一定为黑色，变成情形2、情形3或者情形4继续处理；</p>\n<p>  情形2： s和两个子节点均为黑色，如下图：</p>\n<p>  <img src=\"./images/red-black-tree/red-black-tree-15.png\" alt=\"情况2：父节点为黑色黑色，s和两个子节点均为黑色\"/></p>\n<p>  操作：将s变为红色，此时，x的父节点两个子树的黑色都减少一层（相对于整个树的其他路径），为了补偿这层减少的黑色，将d置为d的父节点，继续遍历，直到遇到第一个红色节点，变为黑色，此时，减少的一层黑色补充回来，达到平衡状态（此时也不关心p节点的颜色，只要在上层找到一个红色节点，变为黑色，整个树就可以达到平衡状态）；</p>\n<p>  情形3：d节点兄弟节点s是黑色，s的左孩子是红色，右孩子是黑色，如下图：<br/>  <img src=\"./images/red-black-tree/red-black-tree-12.png\" alt=\"情况2：兄弟节点s为黑色，近侄子为红色\"/></p>\n<p>   操作：将s和s的左节点颜色互换，s进行右旋，然后d的兄弟节点变为之前s的左节点为黑色，兄弟节点的右节点变为黑色，变成情形4继续处理；</p>\n<p>  情形4：d节点的兄弟节点s是黑色，s的右节点是红色，如下图：<br/>  <img src=\"./images/red-black-tree/red-black-tree-13.png\" alt=\"情况2-5：兄弟节点s为黑色，远侄子为红色\"/></p>\n<p>  操作：兄弟节点s设为d节点父节点的颜色，父节点p设为黑色，s节点的右节点设为黑色，p节点右旋，达到平衡状态；（这时，不论p节点的颜色是红还是黑，包含d路径的减少的黑色由右旋并设为黑色的p节点补充，d兄弟节点s一侧的黑色由s节点的右孩子补充，s节点变为之前的父节点，p子树达到和之前相同状态，平衡结束）;</p>\n<h3 id=\"参考资料\">参考资料</h3>\n<ul>\n<li><p><a href=\"https://github.com/MuffinYu/algorithm-implementation-java\">java实现源码</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/lsr40/article/details/85266069\">【算法】红黑树插入数据的情况与实现（三）</a></p>\n</li>\n<li><p><a href=\"https://www.csxiaoyao.cn/blog/index.php/2016/10/23/java/\">csxiaoyao 博客 —— 红黑树算法的Java实现 【原创】</a></p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/qingergege/p/7351659.html\">红黑树之删除节点</a></p>\n</li>\n<li><p>算法导论-第13章红黑树 删除</p>\n</li>\n</ul>\n","updatedAt":"2019-10-14T12:38:36.033Z"}